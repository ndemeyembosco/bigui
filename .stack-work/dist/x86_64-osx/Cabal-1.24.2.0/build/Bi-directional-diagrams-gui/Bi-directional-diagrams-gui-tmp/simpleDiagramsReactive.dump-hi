
==================== FINAL INTERFACE ====================
2017-06-21 15:52:44.84077 UTC

interface main@main:Main 8002
  interface hash: ef6212692064114fbc13fffbada7a17e
  ABI hash: 2b0b9e3f7527d5d8b52abad0fa1772c5
  export-list hash: abcf1ae33ebcde3be204ca00a404694c
  orphan hash: 314fa288baf4c076a4ee8e1f6fc85a0d
  flag hash: b13dccf66b9d29733c492aaba237c1f0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: JuicyPixels-3.2.8.2@JuicyPixels-3.2.8.2-JViBgltRj36L5XuDdgF7cx
                      SHA-1.6.4.2@SHA-1.6.4.2-6ZuKopcglGG4yoCGsd9koJ
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      active-0.2.0.13@active-0.2.0.13-9JfjP4IRjkHKDGOo2A0iYw
                      adjunctions-4.3@adjunctions-4.3-4NsFv08p09OH79kZsQDVh1
                      aeson-1.0.2.1@aeson-1.0.2.1-7SRc0E2ovMGDtD3x4FKjWQ
                      ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-A79v826bgPr574HtaZPPqC
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-DRMYON11vLW10yp1r3HlfE
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.5.4@base-orphans-0.5.4-ABoxiBf7nXc7Qqh66CgYc9
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-4O9TExPPz6eI82Yj7L4SIj
                      bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      bytes-0.15.3@bytes-0.15.3-IUEMXhCO41DEc2Ur2srpft
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.10@case-insensitive-1.2.0.10-7eVVX59t93gCl3XctAmuil
                      cereal-0.5.4.0@cereal-0.5.4.0-BsAGxfp8yAs3CiRo2E875e
                      clock-0.7.2@clock-0.7.2-8dRNleB7rysIZAOReuhpZA
                      colour-2.3.3@colour-2.3.3-7zspnmhVLMd3uThUzy60rY
                      comonad-5.0.1@comonad-5.0.1-7j4AeOMTFovFSFO9XMFm1
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-3UCY3arLvoG71jrGOYoc39
                      data-default-0.7.1.1@data-default-0.7.1.1-7EGYJX2YWqWJRbPFUHNoCr
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD
                      data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-bob6IQGdJq92c061H46zK
                      data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-FKnZBeovJMk4M89wQxDhjl
                      data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-9zaGDEmgOixKkmLylWdN5l
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0
                      diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF
                      diagrams-solve-0.1.0.1@diagrams-solve-0.1.0.1-8z1vvS2NCi1DIyzPhWywoe
                      diagrams-svg-1.4.1@diagrams-svg-1.4.1-BQbARh8TFqf2pEyWxjqu6r
                      directory-1.3.0.0@directory-1.3.0.0
                      distributive-0.5.2@distributive-0.5.2-JCgfTXNR3ywAyV7fFWIBI5
                      dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD
                      dual-tree-0.2.0.9@dual-tree-0.2.0.9-7ROOrjb2AwPGsxfW7l6fkd
                      entropy-0.3.7@entropy-0.3.7-GVoReSVE1cZ4Y1pKgzhBYO
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      fingertree-0.1.1.0@fingertree-0.1.1.0-Aiaf912zjZGHvH3XyjxrYA
                      free-4.12.4@free-4.12.4-GP8SJAzGfyq6UeKHSkzaha
                      fsnotify-0.2.1@fsnotify-0.2.1-KjsrxaR60FZIw1sd2DNkn4
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      hfsevents-0.1.6@hfsevents-0.1.6-qwZMw80gQuFX67SQURUs5
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      intervals-0.7.2@intervals-0.7.2-3vzSDbz3biR3JT8ePCbYOq
                      io-streams-1.3.6.1@io-streams-1.3.6.1-vZtlHxlaIlIrLRmYmICGw
                      io-streams-haproxy-1.0.0.1@io-streams-haproxy-1.0.0.1-BpXX3KpSygHBSFCJsQXjBD
                      kan-extensions-5.0.2@kan-extensions-5.0.2-KVnVF8a8AJ42gswaE26iyg
                      lens-4.15.1@lens-4.15.1-8Uk4helmTKohz4c7lsvnB
                      lifted-base-0.2.3.11@lifted-base-0.2.3.11-4Kc0AoU71Dw4GRoYEJbzeA
                      linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu
                      monad-control-1.0.2.0@monad-control-1.0.2.0-9vFAzdcj5jULACrGt8cUir
                      monoid-extras-0.4.2@monoid-extras-0.4.2-8LdQHrr3Uj13KjEWRDFIkA
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
                      newtype-0.2@newtype-0.2-CoUG4lREtI4Hba8CNmzidy
                      old-locale-1.0.0.7@old-locale-1.0.0.7-KGBP1BSKxH5GCm0LnZP04j
                      optparse-applicative-0.13.2.0@optparse-applicative-0.13.2.0-EqIYOWOFTvf23sT5QTYn9U
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      process-1.4.3.0@process-1.4.3.0
                      profunctors-5.2@profunctors-5.2-85ZLvwISeusLRZoJlitoyP
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      readable-0.3.1@readable-0.3.1-8piNgty2EAr2CxSq7XRfFV
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      safe-0.3.14@safe-0.3.14-GsbXn9D9F3BDazVNcErzdQ
                      scientific-0.3.4.15@scientific-0.3.4.15-8KhnwsMCJdHAmYurRJsTmW
                      semigroupoids-5.1@semigroupoids-5.1-G6hp8hbTJmG326ffvAeaw8
                      snap-core-1.0.2.1@snap-core-1.0.2.1-7zNL9o6kjex9maTjlcm5hb
                      snap-server-1.0.2.2@snap-server-1.0.2.2-WnbaIYEtZATfwQhCESjv
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      svg-builder-0.1.0.2@svg-builder-0.1.0.2-Blfiw5KrhOtGQnbQwRjlw8
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      threepenny-gui-0.7.0.2@threepenny-gui-0.7.0.2-KcPY0egzpQoBAXfTgLvrv2
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-GKSs0LKukAL8ymq2naFmrH
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unix-2.7.2.1@unix-2.7.2.1
                      unix-compat-0.4.3.1@unix-compat-0.4.3.1-Ausmw6d7KIwA7sl52mzqxC
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o
                      vault-0.3.0.7@vault-0.3.0.7-HJSJzPTOq6IJLrOGPrOio
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
                      websockets-0.10.0.0@websockets-0.10.0.0-AV3wAD0UQgcEBsvPISchdj
                      websockets-snap-0.10.2.2@websockets-snap-0.10.2.2-EtlCMRt4a0O3SdObsixsVN
                      zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp
                      zlib-bindings-0.1.1.5@zlib-bindings-0.1.1.5-4AFfs0NmxaYKZpHnixldSp
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-DRMYON11vLW10yp1r3HlfE:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-DRMYON11vLW10yp1r3HlfE:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         colour-2.3.3@colour-2.3.3-7zspnmhVLMd3uThUzy60rY:Data.Colour
         data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-bob6IQGdJq92c061H46zK:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-FKnZBeovJMk4M89wQxDhjl:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-9zaGDEmgOixKkmLylWdN5l:Data.Default.Instances.OldLocale
         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Points
         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Types
         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Animation.Active
         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.ThreeD.Types
         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Trail
         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Path
         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Segment
         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Types
         diagrams-svg-1.4.1@diagrams-svg-1.4.1-BQbARh8TFqf2pEyWxjqu6r:Diagrams.Backend.SVG.CmdLine
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.Instances
         monoid-extras-0.4.2@monoid-extras-0.4.2-8LdQHrr3Uj13KjEWRDFIkA:Data.Monoid.MList
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         snap-core-1.0.2.1@snap-core-1.0.2.1-7zNL9o6kjex9maTjlcm5hb:Snap.Internal.Instances
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: JuicyPixels-3.2.8.2@JuicyPixels-3.2.8.2-JViBgltRj36L5XuDdgF7cx:Codec.Picture.Tga
                         JuicyPixels-3.2.8.2@JuicyPixels-3.2.8.2-JViBgltRj36L5XuDdgF7cx:Codec.Picture.Tiff
                         JuicyPixels-3.2.8.2@JuicyPixels-3.2.8.2-JViBgltRj36L5XuDdgF7cx:Codec.Picture.Types
                         active-0.2.0.13@active-0.2.0.13-9JfjP4IRjkHKDGOo2A0iYw:Data.Active
                         adjunctions-4.3@adjunctions-4.3-4NsFv08p09OH79kZsQDVh1:Data.Functor.Rep
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-DRMYON11vLW10yp1r3HlfE:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Wrapped
                         bytes-0.15.3@bytes-0.15.3-IUEMXhCO41DEc2Ur2srpft:Data.Bytes.Get
                         bytes-0.15.3@bytes-0.15.3-IUEMXhCO41DEc2Ur2srpft:Data.Bytes.Signed
                         bytes-0.15.3@bytes-0.15.3-IUEMXhCO41DEc2Ur2srpft:Data.Bytes.VarInt
                         clock-0.7.2@clock-0.7.2-8dRNleB7rysIZAOReuhpZA:System.Clock
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Envelope
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Measure
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Names
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Points
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Query
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Style
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Trace
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Transform
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Types
                         diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.V
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Angle
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Animation.Active
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Backend.CmdLine
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.BoundingBox
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Coordinates
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Direction
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Located
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Path
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Segment
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Size
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Tangent
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.ThreeD.Camera
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.ThreeD.Light
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.ThreeD.Shapes
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.ThreeD.Types
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Trail
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Attributes
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Image
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Path
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Segment.Bernstein
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Text
                         diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Types
                         diagrams-svg-1.4.1@diagrams-svg-1.4.1-BQbARh8TFqf2pEyWxjqu6r:Diagrams.Backend.SVG
                         diagrams-svg-1.4.1@diagrams-svg-1.4.1-BQbARh8TFqf2pEyWxjqu6r:Diagrams.Backend.SVG.CmdLine
                         dlist-0.8.0.2@dlist-0.8.0.2-6Wnps4GD7EFnRucVzXIFD:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         intervals-0.7.2@intervals-0.7.2-3vzSDbz3biR3JT8ePCbYOq:Numeric.Interval.Kaucher
                         kan-extensions-5.0.2@kan-extensions-5.0.2-KVnVF8a8AJ42gswaE26iyg:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-KVnVF8a8AJ42gswaE26iyg:Data.Functor.Yoneda
                         lens-4.15.1@lens-4.15.1-8Uk4helmTKohz4c7lsvnB:Control.Lens.At
                         lens-4.15.1@lens-4.15.1-8Uk4helmTKohz4c7lsvnB:Control.Lens.Internal.Indexed
                         lens-4.15.1@lens-4.15.1-8Uk4helmTKohz4c7lsvnB:Control.Lens.Reified
                         lens-4.15.1@lens-4.15.1-8Uk4helmTKohz4c7lsvnB:Control.Lens.Tuple
                         lens-4.15.1@lens-4.15.1-8Uk4helmTKohz4c7lsvnB:Control.Lens.Wrapped
                         lens-4.15.1@lens-4.15.1-8Uk4helmTKohz4c7lsvnB:Control.Lens.Zoom
                         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.Affine
                         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.Plucker
                         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.Quaternion
                         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.V
                         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.V0
                         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.V1
                         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.V2
                         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.V3
                         linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.V4
                         monad-control-1.0.2.0@monad-control-1.0.2.0-9vFAzdcj5jULACrGt8cUir:Control.Monad.Trans.Control
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-85ZLvwISeusLRZoJlitoyP:Data.Profunctor.Rep
                         snap-core-1.0.2.1@snap-core-1.0.2.1-7zNL9o6kjex9maTjlcm5hb:Snap.Internal.Core
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-1XEErQCPPPc2SEtcHHNx9o:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp:Codec.Compression.Zlib.Stream
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Printf 6701574960cd2af960fec5d940be0c25
import  -/  diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Compile 4da0409d0f65126bc0a9019df1566ddc
import  -/  diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Transform bc9f2fe209a14c0ee8bb9b7407173245
import  -/  diagrams-core-1.4@diagrams-core-1.4-DM5OHDuDYPV8563IFAsnd0:Diagrams.Core.Types 7d327ce5307c81cc399d24f69fdebee1
import  -/  diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Combinators 55d6c6183a99cb547fe96c87200bc8b2
import  -/  diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Prelude a3718d9eb6fd294d0f1b917305324daa
import  -/  diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Query 5c0fc90c56e3624890ced7894c097eb7
import  -/  diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Ellipse cc9d99cc756315ea9293f528bb26d81a
import  -/  diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Shapes 71dd47e311249c6e9138ffab093365d1
import  -/  diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Size 3bcad6571a5a538b80c9a1cebe0ded35
import  -/  diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.TwoD.Types c434c4bfbc40559c3e628caa807972e4
import  -/  diagrams-lib-1.4.1.2@diagrams-lib-1.4.1.2-LcVgXQNTjpAGM5qVNUYVKF:Diagrams.Util 8b7d333eb95f43ce5522ff87f9350dfc
import  -/  diagrams-svg-1.4.1@diagrams-svg-1.4.1-BQbARh8TFqf2pEyWxjqu6r:Diagrams.Backend.SVG 18929aa18de3e264ff4850eae4aef5c7
import  -/  diagrams-svg-1.4.1@diagrams-svg-1.4.1-BQbARh8TFqf2pEyWxjqu6r:Diagrams.Backend.SVG.CmdLine b254b7e2eadc9611594281b7db131862
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.Affine 77564458f00417ab606c6bafe3c99215
import  -/  linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.Metric 62973bfa495e4694f2d93c4a9ace647d
import  -/  linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.V2 ace45e6097769fa7ceac63a91b5ac121
import  -/  linear-1.20.6@linear-1.20.6-KEeOuzoQfY3IHBeEdgnbcu:Linear.Vector 60b6ec0744c5fa27f39a50a6029cde65
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec b63ffbcfd32da83683c00215f9c65dae
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Char d53119cfb6cc359f4e0f9ede64e0f78f
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Combinator 66f1086aa7a42f6659ea2da2b481ca67
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Error ce2217365701a41a4565dbdaf79d63d9
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Expr b6cba784a2474a5c34c526091ea7a3da
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Language 4edef19ab0f4a4bf3e2d6a18ca44fc9c
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Pos 722d2dd11f7d41778d1cb0c7e9424b8c
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Prim 09b8e7124f6cf9e8a58a20d480bbf894
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.String 51cfdd88fd21b0eb9bc7dcb50c6d3f2c
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Token 5cde724d669ad19bd7a72e94fb706454
import  -/  svg-builder-0.1.0.2@svg-builder-0.1.0.2-Blfiw5KrhOtGQnbQwRjlw8:Graphics.Svg.Core 1d35bc7fa630517b43457471fecd2b99
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Internal a2f6f66c5bb1247458d9fa25257ab188
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Internal.Lazy 1efb735dc8fcde46f3a3e88605ea2067
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy 547b2cb8d74b3b03ee583c506a59422a
import  -/  threepenny-gui-0.7.0.2@threepenny-gui-0.7.0.2-KcPY0egzpQoBAXfTgLvrv2:Foreign.JavaScript.Types 9aee8f8ebbf0fb6d157095cd0f3401d8
import  -/  threepenny-gui-0.7.0.2@threepenny-gui-0.7.0.2-KcPY0egzpQoBAXfTgLvrv2:Graphics.UI.Threepenny 3cd21cb5a0c35ff8e96b83ad5edaeccf
import  -/  threepenny-gui-0.7.0.2@threepenny-gui-0.7.0.2-KcPY0egzpQoBAXfTgLvrv2:Graphics.UI.Threepenny.Core 618ad661b86abef7dae8f3e9ee9adcfb
import  -/  threepenny-gui-0.7.0.2@threepenny-gui-0.7.0.2-KcPY0egzpQoBAXfTgLvrv2:Graphics.UI.Threepenny.Elements 59d4d65a9047e739a4d935d5a7dd789e
import  -/  threepenny-gui-0.7.0.2@threepenny-gui-0.7.0.2-KcPY0egzpQoBAXfTgLvrv2:Graphics.UI.Threepenny.Events 3a53ed2a958ac4c23bbc24c66e68f538
import  -/  threepenny-gui-0.7.0.2@threepenny-gui-0.7.0.2-KcPY0egzpQoBAXfTgLvrv2:Graphics.UI.Threepenny.Internal 4731b86affb03dbb16ed1f9e63fcc00f
import  -/  threepenny-gui-0.7.0.2@threepenny-gui-0.7.0.2-KcPY0egzpQoBAXfTgLvrv2:Reactive.Threepenny 9f3498853d91b8d22ed09be9d6009766
36a17caa2f3bf88e0909fddc7c5ef083
  $fEqCHOICE :: GHC.Classes.Eq Main.CHOICE
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.CHOICE Main.$fEqCHOICE_$c== Main.$fEqCHOICE_$c/= -}
36a17caa2f3bf88e0909fddc7c5ef083
  $fEqCHOICE_$c/= :: Main.CHOICE -> Main.CHOICE -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.CHOICE) (b :: Main.CHOICE) ->
                 case a of wild {
                   Main.LEFT
                   -> case b of wild1 {
                        Main.LEFT -> GHC.Types.False Main.RIGHT -> GHC.Types.True }
                   Main.RIGHT
                   -> case b of wild1 {
                        Main.LEFT -> GHC.Types.True Main.RIGHT -> GHC.Types.False } }) -}
36a17caa2f3bf88e0909fddc7c5ef083
  $fEqCHOICE_$c== :: Main.CHOICE -> Main.CHOICE -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.CHOICE) (ds1 :: Main.CHOICE) ->
                 case ds of wild {
                   Main.LEFT
                   -> case ds1 of wild1 {
                        Main.LEFT -> GHC.Types.True Main.RIGHT -> GHC.Types.False }
                   Main.RIGHT
                   -> case ds1 of wild1 {
                        Main.LEFT -> GHC.Types.False Main.RIGHT -> GHC.Types.True } }) -}
36a17caa2f3bf88e0909fddc7c5ef083
  $fShowCHOICE :: GHC.Show.Show Main.CHOICE
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.CHOICE
                  Main.$fShowCHOICE_$cshowsPrec
                  Main.$fShowCHOICE_$cshow
                  Main.$fShowCHOICE_$cshowList -}
36a17caa2f3bf88e0909fddc7c5ef083
  $fShowCHOICE1 :: Main.CHOICE -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.CHOICE) (eta10 :: GHC.Base.String) ->
                 case ds of wild {
                   Main.LEFT
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowCHOICE3)
                        eta10
                   Main.RIGHT
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowCHOICE2)
                        eta10 }) -}
03c6092c14f48a312ccf4f677a9cabee
  $fShowCHOICE2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RIGHT"#) -}
b6175b56208f063f7d46024e6910dd94
  $fShowCHOICE3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LEFT"#) -}
36a17caa2f3bf88e0909fddc7c5ef083
  $fShowCHOICE_$cshow :: Main.CHOICE -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.CHOICE) ->
                 case x of wild {
                   Main.LEFT -> Main.$fShowCHOICE3
                   Main.RIGHT -> Main.$fShowCHOICE2 }) -}
36a17caa2f3bf88e0909fddc7c5ef083
  $fShowCHOICE_$cshowList :: [Main.CHOICE] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.CHOICE
                   Main.$fShowCHOICE1) -}
36a17caa2f3bf88e0909fddc7c5ef083
  $fShowCHOICE_$cshowsPrec ::
    GHC.Types.Int -> Main.CHOICE -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.CHOICE)
                   (eta10 :: GHC.Base.String) ->
                 case ds1 of wild {
                   Main.LEFT
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowCHOICE3)
                        eta10
                   Main.RIGHT
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowCHOICE2)
                        eta10 }) -}
a3cd7b2f23e7bc557a5cf0c9fc0c05f4
  $fShowSDdata :: GHC.Show.Show Main.SDdata
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.SDdata
                  Main.$fShowSDdata_$cshowsPrec
                  Main.$fShowSDdata_$cshow
                  Main.$fShowSDdata_$cshowList -}
a3cd7b2f23e7bc557a5cf0c9fc0c05f4
  $fShowSDdata1 :: Main.SDdata -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.SDdata) -> Main.$w$cshowsPrec 0# w) -}
c15d3bd9e7dd460fd226107b5ddad6b1
  $fShowSDdata2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SCale "#) -}
0ea6fc1287b1bef49d0b1f2bcfaf65f5
  $fShowSDdata3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
2ef18baad108a0d6cb1d6eb2a3c4b5bd
  $fShowSDdata4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Click "#) -}
727ef7f491a94ae4cec14f28fa96e038
  $fShowSDdata5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DragCoord "#) -}
2703156474f6d65f30e648bf98eb16f4
  $fShowSDdata6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FrmCode "#) -}
a3cd7b2f23e7bc557a5cf0c9fc0c05f4
  $fShowSDdata_$cshow :: Main.SDdata -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.SDdata) ->
                 Main.$fShowSDdata_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a3cd7b2f23e7bc557a5cf0c9fc0c05f4
  $fShowSDdata_$cshowList :: [Main.SDdata] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.SDdata
                   Main.$fShowSDdata1) -}
a3cd7b2f23e7bc557a5cf0c9fc0c05f4
  $fShowSDdata_$cshowsPrec ::
    GHC.Types.Int -> Main.SDdata -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.SDdata) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$w$cshowsPrec ww1 w1 }) -}
addc1c6bbec32f2826d02a9ea8ac4b81
  $fShowSDdata_$s$fShowV2 ::
    GHC.Show.Show (Linear.V2.V2 GHC.Types.Double)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Linear.V2.V2 GHC.Types.Double)
                  (Linear.V2.$fShowV2_$cshowsPrec
                     @ GHC.Types.Double
                     GHC.Float.$fShowDouble)
                  Main.$fShowSDdata_$s$fShowV2_$cshow
                  Main.$fShowSDdata_$s$fShowV2_$cshowList -}
2cde7a39231d00addd5015f250b27326
  $fShowSDdata_$s$fShowV2_$cshow ::
    Linear.V2.V2 GHC.Types.Double -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SS),1*U(U(U),U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta10 :: Linear.V2.V2 GHC.Types.Double) ->
                 Linear.V2.$fShowV2_$cshowsPrec
                   @ GHC.Types.Double
                   GHC.Float.$fShowDouble
                   GHC.Show.shows22
                   eta10
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6bb04b15a87fedbb75bd5de454995a14
  $fShowSDdata_$s$fShowV2_$cshowList ::
    [Linear.V2.V2 GHC.Types.Double] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta10 :: [Linear.V2.V2 GHC.Types.Double])
                   (eta11 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Linear.V2.V2 GHC.Types.Double)
                   (Linear.V2.$fShowV2_$cshowsPrec
                      @ GHC.Types.Double
                      GHC.Float.$fShowDouble
                      Linear.V2.$fShowV1)
                   eta10
                   eta11) -}
06f7681e73e4776d6de3a95858a75351
  $fShowSimpleDiagram :: GHC.Show.Show Main.SimpleDiagram
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.SimpleDiagram
                  Main.$fShowSimpleDiagram_$cshowsPrec
                  Main.$fShowSimpleDiagram_$cshow
                  Main.$fShowSimpleDiagram_$cshowList -}
06f7681e73e4776d6de3a95858a75351
  $fShowSimpleDiagram1 :: Main.SimpleDiagram -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Main.$fShowSimpleDiagram_$cshowsPrec
                   Main.$fShowSimpleDiagram2) -}
f305ce6e96a35f33b600a19fcdffb8c6
  $fShowSimpleDiagram2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
06f7681e73e4776d6de3a95858a75351
  $fShowSimpleDiagram_$cshow :: Main.SimpleDiagram -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.SimpleDiagram) ->
                 Main.$fShowSimpleDiagram_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
06f7681e73e4776d6de3a95858a75351
  $fShowSimpleDiagram_$cshowList ::
    [Main.SimpleDiagram] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.SimpleDiagram
                   Main.$fShowSimpleDiagram1) -}
06f7681e73e4776d6de3a95858a75351
  $fShowSimpleDiagram_$cshowsPrec ::
    GHC.Types.Int -> Main.SimpleDiagram -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
3d85e048c2d2914aaaaa7cda9940f7d3
  $s$fBackendSVGV2n ::
    Diagrams.Core.Types.Backend
      Diagrams.Backend.SVG.SVG Linear.V2.V2 GHC.Types.Double
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Diagrams.Backend.SVG.SVG
                  @ Linear.V2.V2
                  @ GHC.Types.Double
                  (Diagrams.Backend.SVG.$fBackendSVGV2n_$cadjustDia
                     @ GHC.Types.Double
                     Main.$s$fBackendSVGV2n1)
                  (Diagrams.Backend.SVG.$fBackendSVGV2n_$crenderRTree
                     @ GHC.Types.Double
                     Main.$s$fBackendSVGV2n1) -}
76763156738567fdf652cc9a8eb0e630
  $s$fBackendSVGV2n1 ::
    Graphics.Rendering.SVG.SVGFloat GHC.Types.Double
  {- Strictness: m,
     Unfolding: ((GHC.Float.$fShowDouble,
                  Main.$s$fBackendSVGV2n_$s$fTypeableFloatn)) -}
e7845fdf122799ad53c6820db20d9447
  $s$fBackendSVGV2n2 ::
    Data.Typeable.Internal.Typeable GHC.Types.Double
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fBackendSVGV2n3
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Types.Double>_N)) -}
775756a814e8946c1ec3da21724ac5e9
  $s$fBackendSVGV2n3 ::
    GHC.Prim.Proxy# GHC.Types.Double -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Types.Double) ->
                 Main.$s$fBackendSVGV2n4) -}
19264878698f2ee0c5fb508017c12967
  $s$fBackendSVGV2n4 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Main.$s$fBackendSVGV2n5
                           kt_fps) of dt1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 Data.Typeable.Internal.TypeRep
                   dt2
                   dt3
                   GHC.Types.$tcDouble
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
03ac6a25112cbc892cc3788e0dfd5501
  $s$fBackendSVGV2n5 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8705313363352784917##
                   10768904120299974647##) -}
4337a74403ae6b72fb2da140305e02f4
  $s$fBackendSVGV2n_$s$fTypeableFloatn ::
    Diagrams.Core.Types.TypeableFloat GHC.Types.Double
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Main.$s$fBackendSVGV2n2
                  Main.$s$fBackendSVGV2n_$s$fTypeableFloatn_$cp2TypeableFloat -}
9c180cacd385574f7bb3fdbb31064ead
  $s$fBackendSVGV2n_$s$fTypeableFloatn_$cp2TypeableFloat ::
    GHC.Float.RealFloat GHC.Types.Double
  {- Unfolding: InlineRule (0, True, True)
                GHC.Float.$fRealFloatDouble -}
128ec139f4539325bef3812e5cb2f433
  $s$fEnvelopedQDiagram_$s$fOrderedFields ::
    Diagrams.Core.Envelope.OrderedField GHC.Types.Double
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Main.$s$fEnvelopedQDiagram_$s$fOrderedFields_$cp1OrderedField
                  Main.$s$fEnvelopedQDiagram_$s$fOrderedFields_$cp2OrderedField -}
fdb4df59613356179f463b8e5b42fcbe
  $s$fEnvelopedQDiagram_$s$fOrderedFields_$cp1OrderedField ::
    GHC.Float.Floating GHC.Types.Double
  {- Unfolding: InlineRule (0, True, True)
                GHC.Float.$fFloatingDouble -}
712cbcc81d2ea05d06831d4e5a30779a
  $s$fEnvelopedQDiagram_$s$fOrderedFields_$cp2OrderedField ::
    GHC.Classes.Ord GHC.Types.Double
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Classes.$fOrdDouble -}
8d9f5324580d0fb1ee2698d7e9c02ab1
  $s$fEq[] :: GHC.Classes.Eq [Main.CHOICE]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Main.CHOICE]
                  (GHC.Classes.$fEq[]_$c== @ Main.CHOICE Main.$fEqCHOICE)
                  Main.$s$fEq[]_$s$fEq[]_$c/= -}
5b4d30f9c1bf052d1b76fdb36162bf0d
  $s$fEq[]_$s$fEq[]_$c/= ::
    [Main.CHOICE] -> [Main.CHOICE] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Main.CHOICE]) (y :: [Main.CHOICE]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c== @ Main.CHOICE Main.$fEqCHOICE x y)) -}
e2676fd649bf2020c6c547eb1b1ae551
  $s$fHasBasisv :: Diagrams.Core.Transform.HasBasis Linear.V2.V2
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Linear.V2.V2
                  Main.$s$fHasBasisv_$s$fHasBasisv_$cp1HasBasis
                  Main.$s$fHasBasisv_$s$fHasBasisv_$cp2HasBasis
                  Main.$s$fHasBasisv_$s$fHasBasisv_$cp3HasBasis -}
f827421413c0761357b1afa7a830b003
  $s$fHasBasisv1 ::
    Linear.Vector.E Linear.V2.V2
    Data.Type.Equality.~ Linear.Vector.E Linear.V2.V2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fHasBasisv2
                  `cast`
                (Sym (Data.Type.Equality.N:~[0] <*>_N) <Linear.Vector.E
                                                          Linear.V2.V2>_N <Linear.Vector.E
                                                                             Linear.V2.V2>_N) -}
0de8924ba5090ba3a3564b7b497be130
  $s$fHasBasisv2 ::
    Linear.Vector.E Linear.V2.V2
    GHC.Types.~~ Linear.Vector.E Linear.V2.V2
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ (Linear.Vector.E Linear.V2.V2)
                   @ (Linear.Vector.E Linear.V2.V2)
                   @~ <Linear.Vector.E Linear.V2.V2>_N) -}
bbabbc6246de195aba62317fbfe9def9
  $s$fHasBasisv_$s$fHasBasisv_$cp1HasBasis ::
    Linear.Vector.Additive Linear.V2.V2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Linear.V2.$fAdditiveV2 -}
6beabb4693ce24446cd11205af041e51
  $s$fHasBasisv_$s$fHasBasisv_$cp2HasBasis ::
    Data.Functor.Rep.Representable Linear.V2.V2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Linear.V2.$fRepresentableV2 -}
31436b670ccdebe2b53dd2101bc9631b
  $s$fHasBasisv_$s$fHasBasisv_$cp3HasBasis ::
    Data.Functor.Rep.Rep Linear.V2.V2
    Data.Type.Equality.~ Linear.Vector.E Linear.V2.V2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fHasBasisv1
                  `cast`
                ((Data.Type.Equality.~)
                   <*>_N
                   (Sym (Linear.V2.D:R:RepV2[0]))
                   <Linear.Vector.E Linear.V2.V2>_N)_R -}
530d63f40c25cf90e2d3f7b58fa7a71d
  $s$fHasLinearMapv ::
    Diagrams.Core.Transform.HasLinearMap Linear.V2.V2
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Linear.V2.V2
                  Main.$s$fHasLinearMapv1
                  Main.$s$fHasLinearMapv_$s$fHasLinearMapv_$cp2HasLinearMap -}
31dda3f83e71e8f4085e8d3729093c95
  $s$fHasLinearMapv1 :: Diagrams.Core.Transform.HasBasis Linear.V2.V2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fHasBasisv -}
590cfce118d9cfbcffcd1cf096754bfe
  $s$fHasLinearMapv_$s$fHasLinearMapv_$cp2HasLinearMap ::
    Data.Traversable.Traversable Linear.V2.V2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Linear.V2.$fTraversableV2 -}
9699c52b7ae9e47373610b5a51a666b8
  $s$fInSpacevna1 ::
    GHC.Types.Double Data.Type.Equality.~ GHC.Types.Double
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fInSpacevna2
                  `cast`
                (Sym (Data.Type.Equality.N:~[0]
                          <*>_N) <GHC.Types.Double>_N <GHC.Types.Double>_N) -}
7a8cb1e22eee8096e2635088961479ea
  $s$fInSpacevna2 :: GHC.Types.Double GHC.Types.~~ GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   @~ <GHC.Types.Double>_N) -}
b80897dc83c17a32d2fd67e346360e9e
  $s$fInSpacevna3 :: Linear.V2.V2 Data.Type.Equality.~ Linear.V2.V2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fInSpacevna4
                  `cast`
                (Sym (Data.Type.Equality.N:~[0]
                          <* -> *>_N) <Linear.V2.V2>_N <Linear.V2.V2>_N) -}
e164eacc764f2d3dd72ee02e85e1794c
  $s$fInSpacevna4 :: Linear.V2.V2 GHC.Types.~~ Linear.V2.V2
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ (* -> *)
                   @ (* -> *)
                   @ Linear.V2.V2
                   @ Linear.V2.V2
                   @~ <Linear.V2.V2>_N) -}
7b417c71010d67d374c508335a7d3b5d
  $s$fInSpacevna6 ::
    Diagrams.Core.V.InSpace
      Linear.V2.V2
      GHC.Types.Double
      (Diagrams.Core.Types.QDiagram
         Diagrams.Backend.SVG.B
         Linear.V2.V2
         GHC.Types.Double
         Data.Monoid.Any)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Linear.V2.V2
                  @ GHC.Types.Double
                  @ (Diagrams.Core.Types.QDiagram
                       Diagrams.Backend.SVG.B
                       Linear.V2.V2
                       GHC.Types.Double
                       Data.Monoid.Any)
                  Main.$s$fInSpacevna_$s$fInSpacevna_$cp1InSpace2
                  Main.$s$fInSpacevna_$s$fInSpacevna_$cp2InSpace2
                  Main.$s$fHasBasisv_$s$fHasBasisv_$cp1HasBasis
                  Main.$s$fInSpacevna_$s$fInSpacevna_$cp4InSpace -}
a5a059b8069ea90222c519b565115ac1
  $s$fInSpacevna_$s$fInSpacevna_$cp1InSpace2 ::
    Diagrams.Core.V.V
      (Diagrams.Core.Types.QDiagram
         Diagrams.Backend.SVG.B
         Linear.V2.V2
         GHC.Types.Double
         Data.Monoid.Any)
    Data.Type.Equality.~ Linear.V2.V2
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fInSpacevna3
                  `cast`
                ((Data.Type.Equality.~)
                   <* -> *>_N
                   (Sym (Diagrams.Core.Types.D:R:VQDiagram[0]
                             <Data.Monoid.Any>_N
                             <GHC.Types.Double>_N
                             <Linear.V2.V2>_N
                             <Diagrams.Backend.SVG.SVG>_N))
                   <Linear.V2.V2>_N)_R -}
bcfcbb2279bfa1444efa1031b86530ab
  $s$fInSpacevna_$s$fInSpacevna_$cp2InSpace2 ::
    Diagrams.Core.V.N
      (Diagrams.Core.Types.QDiagram
         Diagrams.Backend.SVG.B
         Linear.V2.V2
         GHC.Types.Double
         Data.Monoid.Any)
    Data.Type.Equality.~ GHC.Types.Double
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fInSpacevna1
                  `cast`
                ((Data.Type.Equality.~)
                   <*>_N
                   (Sym (Diagrams.Core.Types.D:R:NQDiagram[0]
                             <Data.Monoid.Any>_N
                             <GHC.Types.Double>_N
                             <Linear.V2.V2>_N
                             <Diagrams.Backend.SVG.SVG>_N))
                   <GHC.Types.Double>_N)_R -}
3bbea9f0a586a7b2826d7534141ea92f
  $s$fInSpacevna_$s$fInSpacevna_$cp4InSpace ::
    GHC.Num.Num GHC.Types.Double
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Float.$fNumDouble -}
9212a6f0e4f6a71d415cf714c1247223
  $s$fMonoid'm :: Data.Monoid.WithSemigroup.Monoid' [Main.PATH]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Main.PATH]
                  Main.$s$fMonoid'm_$s$fMonoid'm_$cp1Monoid'
                  Main.$s$fMonoid'm_$s$fMonoid'm_$cp2Monoid' -}
5d7f8184e1739b3a5e0c8333e70f368c
  $s$fMonoid'm_$s$fMonoid'm_$cp1Monoid' ::
    Data.Semigroup.Semigroup [Main.PATH]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Data.Semigroup.$fSemigroup[] @ [Main.CHOICE]) -}
0c5e6943016a79c3412083dcd64bfd8e
  $s$fMonoid'm_$s$fMonoid'm_$cp2Monoid' ::
    GHC.Base.Monoid [Main.PATH]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.$fMonoid[] @ [Main.CHOICE]) -}
efb2df0c2d59cb83a8f0b8d9ca71476e
  $s$fRenderablePathSVG ::
    Diagrams.Core.Types.Renderable
      (Diagrams.Path.Path Linear.V2.V2 GHC.Types.Double)
      Diagrams.Backend.SVG.SVG
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Diagrams.Path.Path Linear.V2.V2 GHC.Types.Double)
                  @ Diagrams.Backend.SVG.SVG
                  (Diagrams.Backend.SVG.$fRenderablePathSVG_$cp1Renderable
                     @ GHC.Types.Double
                     Main.$s$fBackendSVGV2n1)
                  (Diagrams.Backend.SVG.$fRenderablePathSVG_$crender
                     @ GHC.Types.Double
                     Main.$s$fBackendSVGV2n1) -}
68c8ca0945c3cc1f3b29b063cbbf5d8d
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  (Main.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok)
                  (Main.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
984572e3541c637553bf20d89dace2dd
  $s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream ::
    GHC.Base.Monad Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ tok -> Data.Functor.Identity.$fMonadIdentity) -}
79280bd956ba70f460b23f972c357bee
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Nothing @ (tok, [tok]))
                   : t ts
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Just @ (tok, [tok]) (t, ts)) }) -}
81b6b64a87e6910f8c36538ec669c659
  $s$fTrailLikeQDiagram ::
    Diagrams.TrailLike.TrailLike
      (Diagrams.Core.Types.QDiagram
         Diagrams.Backend.SVG.SVG
         Linear.V2.V2
         GHC.Types.Double
         Data.Monoid.Any)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Diagrams.Core.Types.QDiagram
                       Diagrams.Backend.SVG.SVG
                       Linear.V2.V2
                       GHC.Types.Double
                       Data.Monoid.Any)
                  (Diagrams.TwoD.Path.$fTrailLikeQDiagram_$cp1TrailLike
                     @ GHC.Types.Double
                     @ Diagrams.Backend.SVG.SVG
                     Main.$s$fTrailLikeQDiagram2
                     Main.$s$fTrailLikeQDiagram1)
                  (Diagrams.TwoD.Path.$fTrailLikeQDiagram_$cp2TrailLike
                     @ GHC.Types.Double
                     @ Diagrams.Backend.SVG.SVG
                     Main.$s$fTrailLikeQDiagram2
                     Main.$s$fTrailLikeQDiagram1)
                  (Diagrams.TwoD.Path.$fTrailLikeQDiagram_$ctrailLike
                     @ GHC.Types.Double
                     @ Diagrams.Backend.SVG.SVG
                     Main.$s$fTrailLikeQDiagram2
                     Main.$s$fTrailLikeQDiagram1) -}
6c57d034272b8cc87022087e7e84c37c
  $s$fTrailLikeQDiagram1 ::
    Diagrams.Core.Types.Renderable
      (Diagrams.Path.Path Linear.V2.V2 GHC.Types.Double)
      Diagrams.Backend.SVG.SVG
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fRenderablePathSVG -}
c5ddba3ab2e8de44c9f653bdab9f78ea
  $s$fTrailLikeQDiagram2 ::
    Diagrams.Core.Types.TypeableFloat GHC.Types.Double
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fBackendSVGV2n_$s$fTypeableFloatn -}
aa7d5a9aac153f3d21cc2fc2a68a3460
  $sprintf3 ::
    GHC.Base.String -> [Text.Printf.UPrintf] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (fmts :: GHC.Base.String)
                   (args :: [Text.Printf.UPrintf]) ->
                 GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Text.Printf.$fIsCharChar_$cfromChar
                   (Text.Printf.uprintfs
                      fmts
                      (GHC.List.reverse1
                         @ Text.Printf.UPrintf
                         args
                         (GHC.Types.[] @ Text.Printf.UPrintf))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
58887ea2bb727d27e81a88743a6c502e
  $stranslate3 ::
    Diagrams.Core.Transform.Transformation
      (Diagrams.Core.V.V
         (Diagrams.Core.Types.QDiagram
            Diagrams.Backend.SVG.SVG
            Linear.V2.V2
            GHC.Types.Double
            [Main.PATH]))
      (Diagrams.Core.V.N
         (Diagrams.Core.Types.QDiagram
            Diagrams.Backend.SVG.SVG
            Linear.V2.V2
            GHC.Types.Double
            [Main.PATH]))
    -> Diagrams.Core.Types.QDiagram
         Diagrams.Backend.SVG.SVG Linear.V2.V2 GHC.Types.Double [Main.PATH]
    -> Diagrams.Core.Types.QDiagram
         Diagrams.Backend.SVG.SVG Linear.V2.V2 GHC.Types.Double [Main.PATH]
  {- Unfolding: (Diagrams.Core.Types.$fHasOriginQDiagram_$ctransform
                   @ GHC.Types.Double
                   @ Linear.V2.V2
                   @ [Main.PATH]
                   @ Diagrams.Backend.SVG.SVG
                   Main.$s$fEnvelopedQDiagram_$s$fOrderedFields
                   Linear.V2.$fMetricV2
                   (Data.Semigroup.$fSemigroup[] @ [Main.CHOICE])) -}
1b3cfe5ebd03a30e42c143e21bfaacac
  $tc'Atop :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3391028025254156520##
                   12278159554818187518##
                   Main.$trModule
                   Main.$tc'Atop1) -}
c2ba8392c68fda1e3f3ad213ea1c82d3
  $tc'Atop1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Atop"#) -}
12baeb805b6b4a7533079f23476e3635
  $tc'Circle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1538300867344710040##
                   1899812707799136802##
                   Main.$trModule
                   Main.$tc'Circle1) -}
0f2b3e8b4c7458b45dae8d39ede0c9ca
  $tc'Circle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Circle"#) -}
8d7039e18a79207b8d7cb5c8540e68df
  $tc'Click :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8723765833785082640##
                   42467889532410047##
                   Main.$trModule
                   Main.$tc'Click1) -}
43fc14ded0ac4c933d2756083d45c345
  $tc'Click1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Click"#) -}
20ef604d0dcc9fb4c5d22961cf4c841f
  $tc'DragCoord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4727787581901907008##
                   13039964935054984126##
                   Main.$trModule
                   Main.$tc'DragCoord1) -}
14fcced475ac585221173479cd31f6d8
  $tc'DragCoord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DragCoord"#) -}
c9d327c8017e8b36aa35cf2282ea9c94
  $tc'FrmCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17811161386972856556##
                   1217541807724333433##
                   Main.$trModule
                   Main.$tc'FrmCode1) -}
a38cc1f33992c0911455b6c397935961
  $tc'FrmCode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FrmCode"#) -}
22679752032aaaefd629acb9fda05c18
  $tc'LEFT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12665848026271614312##
                   11988974984247522829##
                   Main.$trModule
                   Main.$tc'LEFT1) -}
67759cef8cfe3d37b282f306f7cb027c
  $tc'LEFT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LEFT"#) -}
7fba9c67297aca9894833ab2a568af12
  $tc'Polygon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3809477497915495935##
                   2308089437206193295##
                   Main.$trModule
                   Main.$tc'Polygon1) -}
3b78e3f2e5ba39b47b13da9fdff0099b
  $tc'Polygon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Polygon"#) -}
575e00254f2c6a9eda4da8b85ee365b5
  $tc'RIGHT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1254888894712438923##
                   10006656446854910998##
                   Main.$trModule
                   Main.$tc'RIGHT1) -}
527e3e271a2426327f009a75f866c2a1
  $tc'RIGHT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RIGHT"#) -}
1286b83df994b1a2e1918fa73b4fc051
  $tc'SCale :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5321751147810247410##
                   469484824773849374##
                   Main.$trModule
                   Main.$tc'SCale1) -}
4041d55631f5aeb463c974f3f3b33e66
  $tc'SCale1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SCale"#) -}
432610317d5f150afc2f1c4f40232f70
  $tc'SEmpty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12276684449848482365##
                   10825802858476124015##
                   Main.$trModule
                   Main.$tc'SEmpty1) -}
7895b288b50d711aaf4557c2efa6bb39
  $tc'SEmpty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SEmpty"#) -}
39f1c8445b31d1b5a85373d16286a06f
  $tc'Scale :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10794720789786857083##
                   16754594104578001487##
                   Main.$trModule
                   Main.$tc'Scale1) -}
d729fe226d0bd5d8b1965a167c06f577
  $tc'Scale1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scale"#) -}
192aaa1bfeacdc7c92b074bcb7c8f6bc
  $tc'Square :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5212898845705930172##
                   16999297481214503990##
                   Main.$trModule
                   Main.$tc'Square1) -}
dbd87f2f8ae9c07f12e684cc0c50cdf8
  $tc'Square1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Square"#) -}
6e33e90868dbfd16a8d3f515d8e666e1
  $tc'Translate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13479470826889877501##
                   7392489880056024116##
                   Main.$trModule
                   Main.$tc'Translate1) -}
0628bc4ef332b093551343f5302823fa
  $tc'Translate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Translate"#) -}
4ed7a6c9a1045e450b5566c54d3b603f
  $tc'Triangle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12228755557217389982##
                   13346915869768567262##
                   Main.$trModule
                   Main.$tc'Triangle1) -}
3ff1de558bbf80c58962dffb78c75f66
  $tc'Triangle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Triangle"#) -}
3f79c8669a24586e2f429f31505b738d
  $tcCHOICE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13882928641090338057##
                   5181735087958639562##
                   Main.$trModule
                   Main.$tcCHOICE1) -}
9b126ac160662152422bba1d95a01aee
  $tcCHOICE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CHOICE"#) -}
ffa53266799b2010ccac2cda8d37a3b8
  $tcSDdata :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7294452781167550985##
                   7119503066244936450##
                   Main.$trModule
                   Main.$tcSDdata1) -}
3b067a170a93c7c2332472f6b338b96c
  $tcSDdata1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SDdata"#) -}
02ed7ef587f84a26385e188a0a4f8f98
  $tcSimpleDiagram :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7264500456172076036##
                   14499246272921896661##
                   Main.$trModule
                   Main.$tcSimpleDiagram1) -}
8a824c778fca37c0ce4eda4ea9de954b
  $tcSimpleDiagram1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SimpleDiagram"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
a3cd7b2f23e7bc557a5cf0c9fc0c05f4
  $w$cshowsPrec :: GHC.Prim.Int# -> Main.SDdata -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Main.SDdata) ->
                 case w of wild {
                   Main.FrmCode b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowSDdata6
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x)))
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowSDdata6
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))))) }
                   Main.DragCoord b1 b2
                   -> let {
                        f1 :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Linear.V2.V2 ww3 ww4 ->
                          Linear.V2.$w$cshowsPrec
                            @ GHC.Types.Double
                            GHC.Float.$fShowDouble
                            11#
                            ww3
                            ww4 }
                      } in
                      let {
                        p2 :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Main.$fShowSDdata5
                            (f1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ [Main.CHOICE]
                                     Main.$fShowCHOICE_$cshowList
                                     b2
                                     x)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p2
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p2 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }
                   Main.Click b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Linear.Affine.$w$cshowsPrec
                            @ Linear.V2.V2
                            @ GHC.Types.Double
                            Main.$fShowSDdata_$s$fShowV2
                            11#
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Main.$fShowSDdata4 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowSDdata4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Main.SCale b1 b2
                   -> let {
                        f1 :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { GHC.Types.D# ww2 ->
                          GHC.Float.$w$sshowSignedFloat
                            GHC.Float.$fShowDouble_$sshowFloat
                            Main.$fShowSDdata3
                            ww2 }
                      } in
                      let {
                        p2 :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Main.$fShowSDdata2
                            (f1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ [Main.CHOICE]
                                     Main.$fShowCHOICE_$cshowList
                                     b2
                                     x)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p2
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p2 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) } }) -}
e514e46e616367e13db6b81f2b0b5bf5
  $wsetup ::
    Graphics.UI.Threepenny.Internal.Window
    -> ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), (), [GHC.Types.IO ()]) #)
  {- Arity: 3, Strictness: <L,U(U(U,U,U,U,U,U,U,U),U,U,U)><L,U><S,U>,
     Inline: [0] -}
36a17caa2f3bf88e0909fddc7c5ef083
  data CHOICE = LEFT | RIGHT
974b832ca295881d96b1c818fbbbcf63
  type PATH = [Main.CHOICE]
a3cd7b2f23e7bc557a5cf0c9fc0c05f4
  data SDdata where
    FrmCode :: GHC.Base.String -> SDdata
    DragCoord :: (Linear.V2.V2 GHC.Types.Double) -> [Main.PATH]
                 -> SDdata
    Click :: (Diagrams.TwoD.Types.P2 GHC.Types.Double) -> SDdata
    SCale :: GHC.Types.Double -> [Main.PATH] -> SDdata
c208646b834eab323d09cf6abd2fb985
  type Sides = GHC.Types.Int
06f7681e73e4776d6de3a95858a75351
  data SimpleDiagram where
    SEmpty :: SimpleDiagram
    Circle :: SimpleDiagram
    Square :: SimpleDiagram
    Triangle :: SimpleDiagram
    Polygon :: Main.Sides -> SimpleDiagram
    Scale :: GHC.Types.Double -> Main.SimpleDiagram -> SimpleDiagram
    Translate :: (Linear.V2.V2 GHC.Types.Double) -> Main.SimpleDiagram
                 -> SimpleDiagram
    Atop :: Main.SimpleDiagram -> Main.SimpleDiagram -> SimpleDiagram
a70b4757b8f01345e62206a0ccc85a75
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1a3806b2bac9723704e9c8b7958c6f18
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Graphics.UI.Threepenny.Internal.$wstartGUI
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ Data.ByteString.Internal.ByteString)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   Foreign.JavaScript.Types.defaultConfig1
                     `cast`
                   (<Data.ByteString.Internal.ByteString>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Main.main2
                     `cast`
                   (<Graphics.UI.Threepenny.Internal.Window>_R
                    ->_R Trans
                             (<Graphics.UI.Threepenny.Internal.Window>_R
                              ->_R <()>_R
                              ->_R Sym (GHC.Types.N:IO[0] <((), (), [GHC.Types.IO ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                            <Graphics.UI.Threepenny.Internal.Window>_R
                                            <[GHC.Types.IO ()]>_N
                                            <()>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Graphics.UI.Threepenny.Internal.N:UI[0]) <()>_N)))
                   w2) -}
870eca9ef7ee398bbca489f706949769
  main2 ::
    Graphics.UI.Threepenny.Internal.Window
    -> Graphics.UI.Threepenny.Internal.Window
    -> ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), (), [GHC.Types.IO ()]) #)
  {- Arity: 4,
     Strictness: <L,A><L,U(U(U,U,U,U,U,U,U,U),U,U,U)><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: Graphics.UI.Threepenny.Internal.Window)
                   (w1 :: Graphics.UI.Threepenny.Internal.Window)
                   (w2 :: ())
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wsetup w1 w2 w3) -}
9bdc7e51823de0dbdc4fbe1fd5a1c9a1
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
instance GHC.Classes.Eq [Main.CHOICE] = Main.$fEqCHOICE
instance GHC.Show.Show [Main.CHOICE] = Main.$fShowCHOICE
instance GHC.Show.Show [Main.SDdata] = Main.$fShowSDdata
instance GHC.Show.Show [Main.SimpleDiagram]
  = Main.$fShowSimpleDiagram
"SPEC/Main $fBackendSVGV2n @ Double" [ALWAYS] forall ($d(%,%) :: Graphics.Rendering.SVG.SVGFloat
                                                                   GHC.Types.Double)
  Diagrams.Backend.SVG.$fBackendSVGV2n @ GHC.Types.Double $d(%,%)
  = Main.$s$fBackendSVGV2n
"SPEC/Main $fEq[] @ CHOICE" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       Main.CHOICE)
  GHC.Classes.$fEq[] @ Main.CHOICE $dEq = Main.$s$fEq[]
"SPEC/Main $fEq[]_$c/= @ CHOICE" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            Main.CHOICE)
  GHC.Classes.$fEq[]_$c/= @ Main.CHOICE $dEq
  = Main.$s$fEq[]_$s$fEq[]_$c/=
"SPEC/Main $fHasBasisv @ V2" [ALWAYS] forall ($d~ :: Data.Functor.Rep.Rep
                                                       Linear.V2.V2
                                                     Data.Type.Equality.~ Linear.Vector.E
                                                                            Linear.V2.V2)
                                             ($dRepresentable :: Data.Functor.Rep.Representable
                                                                   Linear.V2.V2)
                                             ($dAdditive :: Linear.Vector.Additive Linear.V2.V2)
  Diagrams.Core.Transform.$fHasBasisv @ Linear.V2.V2
                                      $dAdditive
                                      $dRepresentable
                                      $d~
  = Main.$s$fHasBasisv
"SPEC/Main $fHasBasisv_$cp1HasBasis @ V2" [ALWAYS] forall ($d~ :: Data.Functor.Rep.Rep
                                                                    Linear.V2.V2
                                                                  Data.Type.Equality.~ Linear.Vector.E
                                                                                         Linear.V2.V2)
                                                          ($dRepresentable :: Data.Functor.Rep.Representable
                                                                                Linear.V2.V2)
                                                          ($dAdditive :: Linear.Vector.Additive
                                                                           Linear.V2.V2)
  Diagrams.Core.Transform.$fHasBasisv_$cp1HasBasis @ Linear.V2.V2
                                                   $dAdditive
                                                   $dRepresentable
                                                   $d~
  = Main.$s$fHasBasisv_$s$fHasBasisv_$cp1HasBasis
"SPEC/Main $fHasBasisv_$cp2HasBasis @ V2" [ALWAYS] forall ($d~ :: Data.Functor.Rep.Rep
                                                                    Linear.V2.V2
                                                                  Data.Type.Equality.~ Linear.Vector.E
                                                                                         Linear.V2.V2)
                                                          ($dRepresentable :: Data.Functor.Rep.Representable
                                                                                Linear.V2.V2)
                                                          ($dAdditive :: Linear.Vector.Additive
                                                                           Linear.V2.V2)
  Diagrams.Core.Transform.$fHasBasisv_$cp2HasBasis @ Linear.V2.V2
                                                   $dAdditive
                                                   $dRepresentable
                                                   $d~
  = Main.$s$fHasBasisv_$s$fHasBasisv_$cp2HasBasis
"SPEC/Main $fHasBasisv_$cp3HasBasis @ V2" [ALWAYS] forall ($d~ :: Data.Functor.Rep.Rep
                                                                    Linear.V2.V2
                                                                  Data.Type.Equality.~ Linear.Vector.E
                                                                                         Linear.V2.V2)
                                                          ($dRepresentable :: Data.Functor.Rep.Representable
                                                                                Linear.V2.V2)
                                                          ($dAdditive :: Linear.Vector.Additive
                                                                           Linear.V2.V2)
  Diagrams.Core.Transform.$fHasBasisv_$cp3HasBasis @ Linear.V2.V2
                                                   $dAdditive
                                                   $dRepresentable
                                                   $d~
  = Main.$s$fHasBasisv_$s$fHasBasisv_$cp3HasBasis
"SPEC/Main $fHasLinearMapv @ V2" [ALWAYS] forall ($dTraversable :: Data.Traversable.Traversable
                                                                     Linear.V2.V2)
                                                 ($dHasBasis :: Diagrams.Core.Transform.HasBasis
                                                                  Linear.V2.V2)
  Diagrams.Core.Transform.$fHasLinearMapv @ Linear.V2.V2
                                          $dHasBasis
                                          $dTraversable
  = Main.$s$fHasLinearMapv
"SPEC/Main $fHasLinearMapv_$cp2HasLinearMap @ V2" [ALWAYS] forall ($dTraversable :: Data.Traversable.Traversable
                                                                                      Linear.V2.V2)
                                                                  ($dHasBasis :: Diagrams.Core.Transform.HasBasis
                                                                                   Linear.V2.V2)
  Diagrams.Core.Transform.$fHasLinearMapv_$cp2HasLinearMap @ Linear.V2.V2
                                                           $dHasBasis
                                                           $dTraversable
  = Main.$s$fHasLinearMapv_$s$fHasLinearMapv_$cp2HasLinearMap
"SPEC/Main $fInSpacevna @ (QDiagram B V2 Double Any) @ V2 @ Double" [ALWAYS] forall ($dNum :: GHC.Num.Num
                                                                                                GHC.Types.Double)
                                                                                    ($dAdditive :: Linear.Vector.Additive
                                                                                                     Linear.V2.V2)
                                                                                    ($d~1 :: Diagrams.Core.V.N
                                                                                               (Diagrams.Core.Types.QDiagram
                                                                                                  Diagrams.Backend.SVG.B
                                                                                                  Linear.V2.V2
                                                                                                  GHC.Types.Double
                                                                                                  Data.Monoid.Any)
                                                                                             Data.Type.Equality.~ GHC.Types.Double)
                                                                                    ($d~ :: Diagrams.Core.V.V
                                                                                              (Diagrams.Core.Types.QDiagram
                                                                                                 Diagrams.Backend.SVG.B
                                                                                                 Linear.V2.V2
                                                                                                 GHC.Types.Double
                                                                                                 Data.Monoid.Any)
                                                                                            Data.Type.Equality.~ Linear.V2.V2)
  Diagrams.Core.V.$fInSpacevna @ (Diagrams.Core.Types.QDiagram
                                    Diagrams.Backend.SVG.B
                                    Linear.V2.V2
                                    GHC.Types.Double
                                    Data.Monoid.Any)
                               @ Linear.V2.V2
                               @ GHC.Types.Double
                               $d~
                               $d~1
                               $dAdditive
                               $dNum
  = Main.$s$fInSpacevna6
"SPEC/Main $fInSpacevna_$cp1InSpace @ (QDiagram
                                        B V2 Double Any) @ V2 @ Double" [ALWAYS] forall ($dNum :: GHC.Num.Num
                                                                                                                                                    GHC.Types.Double)
                                                                                                                                        ($dAdditive :: Linear.Vector.Additive
                                                                                                                                                         Linear.V2.V2)
                                                                                                                                        ($d~1 :: Diagrams.Core.V.N
                                                                                                                                                   (Diagrams.Core.Types.QDiagram
                                                                                                                                                      Diagrams.Backend.SVG.B
                                                                                                                                                      Linear.V2.V2
                                                                                                                                                      GHC.Types.Double
                                                                                                                                                      Data.Monoid.Any)
                                                                                                                                                 Data.Type.Equality.~ GHC.Types.Double)
                                                                                                                                        ($d~ :: Diagrams.Core.V.V
                                                                                                                                                  (Diagrams.Core.Types.QDiagram
                                                                                                                                                     Diagrams.Backend.SVG.B
                                                                                                                                                     Linear.V2.V2
                                                                                                                                                     GHC.Types.Double
                                                                                                                                                     Data.Monoid.Any)
                                                                                                                                                Data.Type.Equality.~ Linear.V2.V2)
  Diagrams.Core.V.$fInSpacevna_$cp1InSpace @ (Diagrams.Core.Types.QDiagram
                                                Diagrams.Backend.SVG.B
                                                Linear.V2.V2
                                                GHC.Types.Double
                                                Data.Monoid.Any)
                                           @ Linear.V2.V2
                                           @ GHC.Types.Double
                                           $d~
                                           $d~1
                                           $dAdditive
                                           $dNum
  = Main.$s$fInSpacevna_$s$fInSpacevna_$cp1InSpace2
"SPEC/Main $fInSpacevna_$cp2InSpace @ (QDiagram
                                        B V2 Double Any) @ V2 @ Double" [ALWAYS] forall ($dNum :: GHC.Num.Num
                                                                                                                                                    GHC.Types.Double)
                                                                                                                                        ($dAdditive :: Linear.Vector.Additive
                                                                                                                                                         Linear.V2.V2)
                                                                                                                                        ($d~1 :: Diagrams.Core.V.N
                                                                                                                                                   (Diagrams.Core.Types.QDiagram
                                                                                                                                                      Diagrams.Backend.SVG.B
                                                                                                                                                      Linear.V2.V2
                                                                                                                                                      GHC.Types.Double
                                                                                                                                                      Data.Monoid.Any)
                                                                                                                                                 Data.Type.Equality.~ GHC.Types.Double)
                                                                                                                                        ($d~ :: Diagrams.Core.V.V
                                                                                                                                                  (Diagrams.Core.Types.QDiagram
                                                                                                                                                     Diagrams.Backend.SVG.B
                                                                                                                                                     Linear.V2.V2
                                                                                                                                                     GHC.Types.Double
                                                                                                                                                     Data.Monoid.Any)
                                                                                                                                                Data.Type.Equality.~ Linear.V2.V2)
  Diagrams.Core.V.$fInSpacevna_$cp2InSpace @ (Diagrams.Core.Types.QDiagram
                                                Diagrams.Backend.SVG.B
                                                Linear.V2.V2
                                                GHC.Types.Double
                                                Data.Monoid.Any)
                                           @ Linear.V2.V2
                                           @ GHC.Types.Double
                                           $d~
                                           $d~1
                                           $dAdditive
                                           $dNum
  = Main.$s$fInSpacevna_$s$fInSpacevna_$cp2InSpace2
"SPEC/Main $fInSpacevna_$cp4InSpace @ (Point
                                        V2 Double) @ V2 @ Double" [ALWAYS] forall ($dNum :: GHC.Num.Num
                                                                                                                                           GHC.Types.Double)
                                                                                                                               ($dAdditive :: Linear.Vector.Additive
                                                                                                                                                Linear.V2.V2)
                                                                                                                               ($d~1 :: Diagrams.Core.V.N
                                                                                                                                          (Linear.Affine.Point
                                                                                                                                             Linear.V2.V2
                                                                                                                                             GHC.Types.Double)
                                                                                                                                        Data.Type.Equality.~ GHC.Types.Double)
                                                                                                                               ($d~ :: Diagrams.Core.V.V
                                                                                                                                         (Linear.Affine.Point
                                                                                                                                            Linear.V2.V2
                                                                                                                                            GHC.Types.Double)
                                                                                                                                       Data.Type.Equality.~ Linear.V2.V2)
  Diagrams.Core.V.$fInSpacevna_$cp4InSpace @ (Linear.Affine.Point
                                                Linear.V2.V2 GHC.Types.Double)
                                           @ Linear.V2.V2
                                           @ GHC.Types.Double
                                           $d~
                                           $d~1
                                           $dAdditive
                                           $dNum
  = Main.$s$fInSpacevna_$s$fInSpacevna_$cp4InSpace
"SPEC/Main $fMonoid'm @ [PATH]" [ALWAYS] forall ($dMonoid :: GHC.Base.Monoid
                                                               [Main.PATH])
                                                ($dSemigroup :: Data.Semigroup.Semigroup
                                                                  [Main.PATH])
  Data.Monoid.WithSemigroup.$fMonoid'm @ [Main.PATH]
                                       $dSemigroup
                                       $dMonoid
  = Main.$s$fMonoid'm
"SPEC/Main $fMonoid'm_$cp1Monoid' @ [PATH]" [ALWAYS] forall ($dMonoid :: GHC.Base.Monoid
                                                                           [Main.PATH])
                                                            ($dSemigroup :: Data.Semigroup.Semigroup
                                                                              [Main.PATH])
  Data.Monoid.WithSemigroup.$fMonoid'm_$cp1Monoid' @ [Main.PATH]
                                                   $dSemigroup
                                                   $dMonoid
  = Main.$s$fMonoid'm_$s$fMonoid'm_$cp1Monoid'
"SPEC/Main $fMonoid'm_$cp2Monoid' @ [PATH]" [ALWAYS] forall ($dMonoid :: GHC.Base.Monoid
                                                                           [Main.PATH])
                                                            ($dSemigroup :: Data.Semigroup.Semigroup
                                                                              [Main.PATH])
  Data.Monoid.WithSemigroup.$fMonoid'm_$cp2Monoid' @ [Main.PATH]
                                                   $dSemigroup
                                                   $dMonoid
  = Main.$s$fMonoid'm_$s$fMonoid'm_$cp2Monoid'
"SPEC/Main $fOrderedFields @ Double" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                 GHC.Types.Double)
                                                     ($dFloating :: GHC.Float.Floating
                                                                      GHC.Types.Double)
  Diagrams.Core.Envelope.$fOrderedFields @ GHC.Types.Double
                                         $dFloating
                                         $dOrd
  = Main.$s$fEnvelopedQDiagram_$s$fOrderedFields
"SPEC/Main $fOrderedFields_$cp1OrderedField @ Double" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                  GHC.Types.Double)
                                                                      ($dFloating :: GHC.Float.Floating
                                                                                       GHC.Types.Double)
  Diagrams.Core.Envelope.$fOrderedFields_$cp1OrderedField @ GHC.Types.Double
                                                          $dFloating
                                                          $dOrd
  = Main.$s$fEnvelopedQDiagram_$s$fOrderedFields_$cp1OrderedField
"SPEC/Main $fOrderedFields_$cp2OrderedField @ Double" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                  GHC.Types.Double)
                                                                      ($dFloating :: GHC.Float.Floating
                                                                                       GHC.Types.Double)
  Diagrams.Core.Envelope.$fOrderedFields_$cp2OrderedField @ GHC.Types.Double
                                                          $dFloating
                                                          $dOrd
  = Main.$s$fEnvelopedQDiagram_$s$fOrderedFields_$cp2OrderedField
"SPEC/Main $fRenderablePathSVG @ Double" [ALWAYS] forall ($d(%,%) :: Graphics.Rendering.SVG.SVGFloat
                                                                       GHC.Types.Double)
  Diagrams.Backend.SVG.$fRenderablePathSVG @ GHC.Types.Double $d(%,%)
  = Main.$s$fRenderablePathSVG
"SPEC/Main $fShowV2 @ Double" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           GHC.Types.Double)
  Linear.V2.$fShowV2 @ GHC.Types.Double $dShow
  = Main.$fShowSDdata_$s$fShowV2
"SPEC/Main $fShowV2_$cshow @ Double" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                  GHC.Types.Double)
  Linear.V2.$fShowV2_$cshow @ GHC.Types.Double $dShow
  = Main.$fShowSDdata_$s$fShowV2_$cshow
"SPEC/Main $fShowV2_$cshowList @ Double" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                      GHC.Types.Double)
  Linear.V2.$fShowV2_$cshowList @ GHC.Types.Double $dShow
  = Main.$fShowSDdata_$s$fShowV2_$cshowList
"SPEC/Main $fStream[]mtok @ Identity _" [ALWAYS] forall @ tok
                                                        ($dMonad :: GHC.Base.Monad
                                                                      Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  $dMonad
  = Main.$s$fStream[]mtok @ tok
"SPEC/Main $fStream[]mtok_$cp1Stream @ Identity _" [ALWAYS] forall @ tok
                                                                   ($dMonad :: GHC.Base.Monad
                                                                                 Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cp1Stream @ Data.Functor.Identity.Identity
                                             @ tok
                                             $dMonad
  = Main.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok
"SPEC/Main $fStream[]mtok_$cuncons @ Identity _" [ALWAYS] forall @ tok
                                                                 ($dMonad :: GHC.Base.Monad
                                                                               Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Main.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
"SPEC/Main $fTrailLikeQDiagram @ Double @ SVG" [ALWAYS] forall ($dRenderable :: Diagrams.Core.Types.Renderable
                                                                                  (Diagrams.Path.Path
                                                                                     Linear.V2.V2
                                                                                     GHC.Types.Double)
                                                                                  Diagrams.Backend.SVG.SVG)
                                                               ($dTypeableFloat :: Diagrams.Core.Types.TypeableFloat
                                                                                     GHC.Types.Double)
  Diagrams.TwoD.Path.$fTrailLikeQDiagram @ GHC.Types.Double
                                         @ Diagrams.Backend.SVG.SVG
                                         $dTypeableFloat
                                         $dRenderable
  = Main.$s$fTrailLikeQDiagram
"SPEC/Main $fTypeableFloatn @ Double" [ALWAYS] forall ($dRealFloat :: GHC.Float.RealFloat
                                                                        GHC.Types.Double)
                                                      ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                       GHC.Types.Double)
  Diagrams.Core.Types.$fTypeableFloatn @ GHC.Types.Double
                                       $dTypeable
                                       $dRealFloat
  = Main.$s$fBackendSVGV2n_$s$fTypeableFloatn
"SPEC/Main $fTypeableFloatn_$cp2TypeableFloat @ Double" [ALWAYS] forall ($dRealFloat :: GHC.Float.RealFloat
                                                                                          GHC.Types.Double)
                                                                        ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                         GHC.Types.Double)
  Diagrams.Core.Types.$fTypeableFloatn_$cp2TypeableFloat @ GHC.Types.Double
                                                         $dTypeable
                                                         $dRealFloat
  = Main.$s$fBackendSVGV2n_$s$fTypeableFloatn_$cp2TypeableFloat
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

